{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/auth.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\n\nconst SALT_ROUNDS = 10;\nconst JWT_SECRET = process.env.JWT_SECRET as string;\n\nif (!JWT_SECRET) {\n  throw new Error('JWT_SECRET environment variable is not set');\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, SALT_ROUNDS);\n}\n\nexport async function comparePasswords(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\nexport function createJWT(payload: object): string {\n  // Token expires in 7 days\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: '7d' });\n}\n\nexport function verifyJWT(token: string): any {\n  try {\n    return jwt.verify(token, JWT_SECRET);\n  } catch (error) {\n    return null;\n  }\n}\n\n// Helper function to extract token from Authorization header\nexport function extractTokenFromHeader(authHeader: string | null): string | null {\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return null;\n  }\n  return authHeader.substring(7);\n}\n\n// Middleware-like function to verify user from request\nexport function verifyUserFromToken(token: string): { userId: number; email: string } | null {\n  const decoded = verifyJWT(token);\n  if (!decoded || !decoded.userId || !decoded.email) {\n    return null;\n  }\n  return { userId: decoded.userId, email: decoded.email };\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;;;AAEA,MAAM,cAAc;AACpB,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;AAEzC,IAAI,CAAC,YAAY;IACf,MAAM,IAAI,MAAM;AAClB;AAEO,eAAe,aAAa,QAAgB;IACjD,OAAO,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;AAC/B;AAEO,eAAe,iBAAiB,QAAgB,EAAE,IAAY;IACnE,OAAO,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU;AAClC;AAEO,SAAS,UAAU,OAAe;IACvC,0BAA0B;IAC1B,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAK;AACzD;AAEO,SAAS,UAAU,KAAa;IACrC,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAGO,SAAS,uBAAuB,UAAyB;IAC9D,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;QACpD,OAAO;IACT;IACA,OAAO,WAAW,SAAS,CAAC;AAC9B;AAGO,SAAS,oBAAoB,KAAa;IAC/C,MAAM,UAAU,UAAU;IAC1B,IAAI,CAAC,WAAW,CAAC,QAAQ,MAAM,IAAI,CAAC,QAAQ,KAAK,EAAE;QACjD,OAAO;IACT;IACA,OAAO;QAAE,QAAQ,QAAQ,MAAM;QAAE,OAAO,QAAQ,KAAK;IAAC;AACxD","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/auth/signup/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { hashPassword } from '@/lib/auth';\nimport { z } from 'zod';\n\nconst signupSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters long'),\n});\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    \n    // Validate input\n    const validationResult = signupSchema.safeParse(body);\n    if (!validationResult.success) {\n      return NextResponse.json(\n        { error: validationResult.error.errors[0].message },\n        { status: 400 }\n      );\n    }\n\n    const { email, password } = validationResult.data;\n\n    // Check if user already exists\n    const existingUser = await prisma.user.findUnique({ \n      where: { email: email.toLowerCase() } \n    });\n    \n    if (existingUser) {\n      return NextResponse.json(\n        { error: 'User with this email already exists' },\n        { status: 400 }\n      );\n    }\n\n    // Hash password and create user\n    const hashedPassword = await hashPassword(password);\n    const user = await prisma.user.create({\n      data: { \n        email: email.toLowerCase(), \n        hashedPassword \n      },\n      select: {\n        id: true,\n        email: true,\n        createdAt: true,\n      }\n    });\n\n    return NextResponse.json(\n      { \n        message: 'User created successfully',\n        user: {\n          id: user.id,\n          email: user.email,\n          createdAt: user.createdAt,\n        }\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error('Signup error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,eAAe,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5B,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,UAAU,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,iBAAiB;QACjB,MAAM,mBAAmB,aAAa,SAAS,CAAC;QAChD,IAAI,CAAC,iBAAiB,OAAO,EAAE;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,iBAAiB,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO;YAAC,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,iBAAiB,IAAI;QAEjD,+BAA+B;QAC/B,MAAM,eAAe,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChD,OAAO;gBAAE,OAAO,MAAM,WAAW;YAAG;QACtC;QAEA,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,gCAAgC;QAChC,MAAM,iBAAiB,MAAM,CAAA,GAAA,oHAAA,CAAA,eAAY,AAAD,EAAE;QAC1C,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ,OAAO,MAAM,WAAW;gBACxB;YACF;YACA,QAAQ;gBACN,IAAI;gBACJ,OAAO;gBACP,WAAW;YACb;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,MAAM;gBACJ,IAAI,KAAK,EAAE;gBACX,OAAO,KAAK,KAAK;gBACjB,WAAW,KAAK,SAAS;YAC3B;QACF,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}